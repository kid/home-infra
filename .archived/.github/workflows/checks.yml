# This file was generated. See https://daggerverse.dev/mod/github.com/shykes/gha
name: check-matrix
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  workflow_dispatch: {}
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.checks.outputs.targets }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: scripts/install-dagger.sh
        id: install-dagger
        run: |
          #!/bin/bash

          set -o pipefail
          # Fallback to /usr/local for backwards compatability
          prefix_dir="${RUNNER_TEMP:-/usr/local}"

          # Ensure the dir is writable otherwise fallback to tmpdir
          if [[ ! -d "$prefix_dir" ]] || [[ ! -w "$prefix_dir" ]]; then
              prefix_dir="$(mktemp -d)"
          fi
          printf '%s/bin' "$prefix_dir" >> $GITHUB_PATH

          # If the dagger version is 'latest', set the version back to an empty
          # string. This allows the install script to detect and install the latest
          # version itself
          if [[ "$DAGGER_VERSION" == "latest" ]]; then
            DAGGER_VERSION=
          fi

          # The install.sh script creates path ${prefix_dir}/bin
          curl -fsS https://dl.dagger.io/dagger/install.sh | BIN_DIR=${prefix_dir}/bin sh
        env:
          DAGGER_VERSION: v0.13.0
        shell: bash
      - name: scripts/warm-engine.sh
        id: warm-engine
        shell: bash
        run: |
          #!/bin/bash

          # Make sure not to load any implicit module
          cd $(mktemp -d)
          # Run a simple query to "warm up" the engine
          dagger core version
      - id: checks
        name: Generate target list
        shell: bash
        run: |
          #!/bin/bash
          targets=$(dagger call -s -j --ci check-list | jq -c .)
          echo ::set-output name=targets::${targets}
  check:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    strategy:
      matrix:
        targets: ${{ fromJSON(needs.setup.outputs.targets) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: scripts/install-dagger.sh
        id: install-dagger
        run: |
          #!/bin/bash

          set -o pipefail
          # Fallback to /usr/local for backwards compatability
          prefix_dir="${RUNNER_TEMP:-/usr/local}"

          # Ensure the dir is writable otherwise fallback to tmpdir
          if [[ ! -d "$prefix_dir" ]] || [[ ! -w "$prefix_dir" ]]; then
              prefix_dir="$(mktemp -d)"
          fi
          printf '%s/bin' "$prefix_dir" >> $GITHUB_PATH

          # If the dagger version is 'latest', set the version back to an empty
          # string. This allows the install script to detect and install the latest
          # version itself
          if [[ "$DAGGER_VERSION" == "latest" ]]; then
            DAGGER_VERSION=
          fi

          # The install.sh script creates path ${prefix_dir}/bin
          curl -fsS https://dl.dagger.io/dagger/install.sh | BIN_DIR=${prefix_dir}/bin sh
        env:
          DAGGER_VERSION: v0.13.0
        shell: bash
      - shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          dagger call -q --ci --pr ${{ github.event.pull_request.number }} --gh-token=env:GITHUB_TOKEN check --targets ${{ matrix.targets }}
